#!/bin/sh


set -ue

: "${XDG_CONFIG_HOME:=$HOME/.config}"
readonly DEFAULT_CONFIGFILE="$XDG_CONFIG_HOME/syncdirs/config"

readonly CONFIGFILE="${CONFIGFILE:=$DEFAULT_CONFIGFILE}"

readonly EXIT_SUCCESS=0
readonly EXIT_FAILURE=1


die() {
    program_name="$(basename "$0")"
    echo "$program_name: Error: $1" 1>&2
    exit "${2:-$EXIT_FAILURE}"
}

_is_variable_set() {
    [ -n "${1+x}" ]
}

_is_directory() {
    [ -d "$1" ]
}

_is_readable() {
    [ -r "$1" ]
}

_is_writable() {
    [ -w "$1" ]
}

_is_readable_directory() {
    _is_directory "$1" && _is_readable "$1"
}

_is_writable_directory() {
    _is_directory "$1" && _is_writable "$1"
}

check_configfile() {
    if ! _is_readable "$CONFIGFILE"; then
        die "CONFIGFILE(=$CONFIGFILE) not found or not readable" $EXIT_FAILURE
    fi
}

load_config() {
    . "${CONFIGFILE}"
}

get_backup_dirs() {
    echo "${BACKUP_DIRECTORIES}"
}

check_config() {
    if ! _is_variable_set "ROOT_BACKUP_DIRECTORY"; then
        die "Config is invalid: variable ROOT_BACKUP_DIRECTORY not defined" $EXIT_FAILURE
    fi

    if ! _is_variable_set "BACKUP_DIRECTORIES"; then
        die "Config is invalid: variable BACKUP_DIRECTORIES not defined" $EXIT_FAILURE
    fi

    if ! _is_readable_directory "${ROOT_BACKUP_DIRECTORY}"; then
        die "Config is invalid: ROOT_BACKUP_DIRECTORY(=${ROOT_BACKUP_DIRECTORY}) is not a readable directory" $EXIT_FAILURE
    fi
}

_check_backup_dirs() {
    for backup_dir in $(get_backup_dirs)
    do
        if ! _is_writable_directory "${backup_dir}"; then
            die "Config is invalid: '${backup_dir}' is not writable directory, use --skip-missing to skip" $EXIT_FAILURE
        fi
    done
}

sync_root_directory_with() {
    rsync -au "${ROOT_BACKUP_DIRECTORY}/" "$1"
}

syncdelete_root_directory_with() {
    rsync -au --delete "${ROOT_BACKUP_DIRECTORY}/" "$1"
}

contains() {
    p="${1}"; shift
    echo " $* " | grep " ${p} " 1>/dev/null
}

cmd_sync_all() {
    skip_missing=false
    if contains "--skip-missing" "$*" || contains "-s" "$*"; then
        skip_missing=true
    fi

    delete_not_existing_from_target=false
    if contains "--delete" "$*" || contains "-d" "$*"; then
        delete_not_existing_from_target=true
    fi

    if ! $skip_missing; then
        _check_backup_dirs
    fi

    for backup_dir in $(get_backup_dirs)
    do
        if ! _is_writable_directory "$backup_dir"; then
            if $skip_missing; then
                continue
            fi
        fi

        if $delete_not_existing_from_target; then
            syncdelete_root_directory_with "$backup_dir"
        else
            sync_root_directory_with "$backup_dir"
        fi
        echo "Synced root directory with '$backup_dir'"
    done
}


main() {
    check_configfile
    load_config
    check_config

    cmd_sync_all "$@"
}

main "$@"

exit $EXIT_SUCCESS