#!/usr/bin/env bash


set -ueo pipefail
shopt -s nullglob

: "${XDG_CONFIG_HOME:=$HOME/.local/share}"
readonly DEFAULT_CONFIGFILE="$XDG_CONFIG_HOME/bkp/config"

readonly CONFIGFILE="${CONFIGFILE:=$DEFAULT_CONFIGFILE}"

readonly EXIT_SUCCESS=0
readonly EXIT_FAILURE=1


die() {
    local program_name
    program_name="$(basename "$0")"
    echo "$program_name: Error: $1" 1>&2
    exit "${2:-$EXIT_FAILURE}"
}

check_configfile() {
    if [ ! -r "$CONFIGFILE" ]; then
        die "CONFIGFILE(=$CONFIGFILE) not found" $EXIT_FAILURE
    fi
}

load_config() {
    source "$CONFIGFILE"
}

_is_variable_set() {
    [[ -v "$1" ]]
}

_is_directory() {
    [[ -d "$1" ]]
}

_directory_writable() {
    [[ -w "$1" ]]
}

get_backup_dirs() {
    echo "${BACKUP_DIRECTORIES[*]}"
}

check_config() {
    if ! _is_variable_set "ROOT_BACKUP_DIRECTORY"; then
        die "Config is invalid: variable ROOT_BACKUP_DIRECTORY not set" $EXIT_FAILURE
    fi

    if ! _is_variable_set "BACKUP_DIRECTORIES"; then
        die "Config is invalid: variable BACKUP_DIRECTORIES not set" $EXIT_FAILURE
    fi

    if ! _is_directory "$ROOT_BACKUP_DIRECTORY"; then
        die "Config is invalid: ROOT_BACKUP_DIRECTORY(=$ROOT_BACKUP_DIRECTORY) is not a directory" $EXIT_FAILURE
    fi
}

sync_root_with() {
    rsync -ra "$ROOT_BACKUP_DIRECTORY"/* "$ROOT_BACKUP_DIRECTORY"/.* "$1"
}

_is_valid_directory() {
    _is_directory "$1" && _directory_writable "$1"
}

cmd_sync_all() {
    local skip_missing=false
    if [ "${1:-}" = "--skip-missing" ] || [ "${1:-}" = "-s" ]; then
        skip_missing=true
    fi

    for i in $(get_backup_dirs)
    do
        if ! _is_valid_directory "$i"; then
            if $skip_missing; then
                continue
            else
                die "Invalid dir '$i'"
            fi
        fi

        sync_root_with "$i"
        echo "Synced root directory with '$i'"
    done
}


check_configfile
load_config
check_config

if [[ ! -v 1 ]]; then
    die "No command specified" $EXIT_FAILURE
fi

case "$1" in
    sync) shift;  cmd_sync_all "$@"  ;;

    *)            die "'$1' is not a bkp command" $EXIT_FAILURE  ;;
esac
exit $EXIT_SUCCESS